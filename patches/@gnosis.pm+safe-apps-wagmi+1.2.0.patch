diff --git a/node_modules/@gnosis.pm/safe-apps-wagmi/src/index.ts b/node_modules/@gnosis.pm/safe-apps-wagmi/src/index.ts
index 93b226a..e784849 100644
--- a/node_modules/@gnosis.pm/safe-apps-wagmi/src/index.ts
+++ b/node_modules/@gnosis.pm/safe-apps-wagmi/src/index.ts
@@ -21,18 +21,18 @@ class SafeConnector extends Connector<SafeAppProvider, SafeOpts | undefined> {
   readonly name = 'Safe';
   ready = !__IS_SERVER__ && __IS_IFRAME__;
 
-  #provider?: SafeAppProvider;
-  #sdk: SafeAppsSDK;
-  #safe?: SafeInfo;
+  provider?: SafeAppProvider;
+  sdk: SafeAppsSDK;
+  safe?: SafeInfo;
 
   constructor(config: { chains?: Chain[]; options?: SafeOpts }) {
     super({ ...config, options: config?.options });
 
-    this.#sdk = new SafeAppsSDK(config.options);
+    this.sdk = new SafeAppsSDK(config.options);
   }
 
   async connect() {
-    const runningAsSafeApp = await this.#isSafeApp();
+    const runningAsSafeApp = await this.isSafeApp();
     if (!runningAsSafeApp) {
       throw new ConnectorNotFoundError();
     }
@@ -64,50 +64,50 @@ class SafeConnector extends Connector<SafeAppProvider, SafeOpts | undefined> {
   }
 
   async getAccount() {
-    if (!this.#safe) {
+    if (!this.safe) {
       throw new ConnectorNotFoundError();
     }
 
-    return getAddress(this.#safe.safeAddress);
+    return getAddress(this.safe.safeAddress);
   }
 
   async getChainId() {
-    if (!this.#provider) {
+    if (!this.provider) {
       throw new ConnectorNotFoundError();
     }
 
-    return normalizeChainId(this.#provider.chainId);
+    return normalizeChainId(this.provider.chainId);
   }
 
-  async #getSafeInfo(): Promise<SafeInfo> {
-    if (!this.#sdk) {
+  async getSafeInfo(): Promise<SafeInfo> {
+    if (!this.sdk) {
       throw new ConnectorNotFoundError();
     }
-    if (!this.#safe) {
-      this.#safe = await this.#sdk.safe.getInfo();
+    if (!this.safe) {
+      this.safe = await this.sdk.safe.getInfo();
     }
-    return this.#safe;
+    return this.safe;
   }
 
-  async #isSafeApp(): Promise<boolean> {
+  async isSafeApp(): Promise<boolean> {
     if (!this.ready) {
       return false;
     }
 
-    const safe = await Promise.race([this.#getSafeInfo(), new Promise<void>((resolve) => setTimeout(resolve, 300))]);
+    const safe = await Promise.race([this.getSafeInfo(), new Promise<void>((resolve) => setTimeout(resolve, 300))]);
     return !!safe;
   }
 
   async getProvider() {
-    if (!this.#provider) {
-      const safe = await this.#getSafeInfo();
+    if (!this.provider) {
+      const safe = await this.getSafeInfo();
       if (!safe) {
         throw new Error('Could not load Safe information');
       }
 
-      this.#provider = new SafeAppProvider(safe, this.#sdk);
+      this.provider = new SafeAppProvider(safe, this.sdk);
     }
-    return this.#provider;
+    return this.provider;
   }
 
   async getSigner() {
